// tune.pde - represents a series of notes from several voices spread out in time

/////////////////////////////////////////////////////////////
//globals for tune generator

#define TUNE_LIST_SIZE 40

//#define LOG_TUNE

unsigned short int tuneListMidiNote[TUNE_LIST_SIZE]; // MIDI note number
unsigned int tuneListBeat[TUNE_LIST_SIZE];       // beat to start note on
unsigned int tuneListVoice[TUNE_LIST_SIZE];      // voice (0-NOTES) to use

unsigned short int tuneVoice[NOTES];

unsigned short int tuneVolumeDelta[NOTES];
// Volume Deltas for the notes generated by the tune sequence
unsigned short int tuneVibratoPercent[NOTES];
// Vibrato Percents for the notes generated by the tune sequence
unsigned short int tuneEnvelope[NOTES];

long tuneNextBeatTime = 0; // time in millis to do the next beat
int tuneNextBeat = 0; // beat value of the next note to play
int tuneNextListIndex = 0; // index into note list

long tuneBeatInterval = 500; // millisecs per beat
int tuneNoteCount = 0;

void setupTune() // called from setup - clean up our data structures
{
    tuneBeatInterval = 500;
    tuneNextBeatTime = 0;
    
    tuneDelete();
}

void tuneDelete() // destroy the existing tune
{
  tuneNoteCount = 0;
  tuneNextListIndex = 0;
  tuneNextBeat = 0;
  
}

void tuneAddNote( int noteNumber, int beat, int voice )
{
  if(  tuneNoteCount >= TUNE_LIST_SIZE )
    return;
    
  tuneListMidiNote[ tuneNoteCount] = noteNumber; // MIDI note number
  tuneListBeat[ tuneNoteCount] = beat;       // beat to start note on
  tuneListVoice[ tuneNoteCount ] = voice;
   tuneNoteCount++;
}

void progressTune() // called from loop() repeatedly - work out if a note is due, and start it
{
  long now = millis();
  
  if( now < tuneNextBeatTime )
    return;

   // find all the notes in the list which are due at this beat and start them
   while( tuneNextListIndex < tuneNoteCount && tuneListBeat[ tuneNextListIndex ] <= tuneNextBeat )
   {
      
     logTuneProgress();

      
      int voice = tuneListVoice[ tuneNextListIndex ];
      startNote (voice, 
                  tuneListMidiNote[ tuneNextListIndex ], 
                  tuneVoice[ voice ], 
                  tuneVolumeDelta[voice], tuneEnvelope[voice], 7, tuneVibratoPercent[voice]);
 
      tuneNextListIndex ++;
      
   }
    
  tuneNextBeat ++;  
  tuneNextBeatTime = now + tuneBeatInterval;
  
  
  if( tuneNextListIndex >= tuneNoteCount ) // start again
  {
    tuneNextListIndex = 0;
    tuneNextBeat = 0;
  }
  
  
}

void logTuneProgress()
{
      #ifdef DO_LOGGING
      #ifdef LOG_TUNE
      Serial.print ("progressTune - next index: ");
      Serial.print (tuneNextListIndex, DEC); 
      Serial.print ("\n");
      
      Serial.print ("beat: ");
      Serial.print (tuneListBeat[ tuneNextListIndex ], DEC); 
      Serial.print ("\n");

      Serial.print ("midi note num: ");
      Serial.print (tuneListMidiNote[ tuneNextListIndex ], DEC); 
      Serial.print ("\n");
      
      Serial.print ("voice: ");
      Serial.print (tuneListVoice[ tuneNextListIndex ], DEC); 
      Serial.print ("\n");
      #endif
      #endif
}
      
void tuneSetBeatInterval( int time )
{
  tuneBeatInterval = time;
}





/* tuneSetVoice --- set the voice to be used for a given tune generator */

void tuneSetVoice (unsigned short int which_generator, unsigned short int voice)
{
  if ((which_generator >= 0) && (which_generator < NOTES))
    tuneVoice[which_generator] = voice;
}


/* tuneSetVolumeDelta --- set the volume delta to be used for a given tune generator */

void tuneSetVolumeDelta (unsigned short int which_generator, unsigned short int volumeDelta)
{
  if ((which_generator >= 0) && (which_generator < NOTES))
    tuneVolumeDelta[which_generator] = volumeDelta;
}


/* tuneSetVibratoPercent --- set the vibrato percent to be used for a given tune generator */

void tuneSetVibratoPercent (unsigned short int which_generator, unsigned short int vibratoPercent)
{
  if ((which_generator >= 0) && (which_generator < NOTES))
    tuneVibratoPercent[which_generator] = vibratoPercent;
}


/* tuneSetEnvelope --- set the envelope to be used for a given tune generator */

void tuneSetEnvelope (unsigned short int which_generator, unsigned short int envelope)
{
  if ((which_generator >= 0) && (which_generator < NOTES))
    tuneEnvelope[which_generator] = envelope;
}


